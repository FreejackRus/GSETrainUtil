const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function addTestData() {
  try {
    console.log('üîß –î–æ–±–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...');

    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–≥–æ–Ω —Å –Ω–æ–º–µ—Ä–æ–º 123123
    const existingCarriage = await prisma.carriage.findFirst({
      where: { number: '123123' }
    });

    if (!existingCarriage) {
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–µ–∑–¥ 001
      const train001 = await prisma.train.findFirst({
        where: { number: '001' }
      });

      if (train001) {
        await prisma.carriage.create({
          data: {
            number: '123123',
            type: '–ì—Ä—É–∑–æ–≤–æ–π',
            trainId: train001.id
          }
        });
        console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤–∞–≥–æ–Ω 123123');
      }
    } else {
      console.log('‚ÑπÔ∏è –í–∞–≥–æ–Ω 123123 —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–≥–æ–Ω —Å –Ω–æ–º–µ—Ä–æ–º 213123
    const existingCarriage2 = await prisma.carriage.findFirst({
      where: { number: '213123' }
    });

    if (!existingCarriage2) {
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–µ–∑–¥ 001
      const train001 = await prisma.train.findFirst({
        where: { number: '001' }
      });

      if (train001) {
        await prisma.carriage.create({
          data: {
            number: '213123',
            type: '–ü–∞—Å—Å–∞–∂–∏—Ä—Å–∫–∏–π',
            trainId: train001.id
          }
        });
        console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤–∞–≥–æ–Ω 213123');
      }
    } else {
      console.log('‚ÑπÔ∏è –í–∞–≥–æ–Ω 213123 —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–≥–æ–Ω —Å –Ω–æ–º–µ—Ä–æ–º 12121212
    const existingCarriage3 = await prisma.carriage.findFirst({
      where: { number: '12121212' }
    });

    if (!existingCarriage3) {
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–µ–∑–¥ 002
      const train002 = await prisma.train.findFirst({
        where: { number: '002' }
      });

      if (train002) {
        await prisma.carriage.create({
          data: {
            number: '12121212',
            type: '–ë–∞–≥–∞–∂–Ω—ã–π',
            trainId: train002.id
          }
        });
        console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤–∞–≥–æ–Ω 12121212');
      }
    } else {
      console.log('‚ÑπÔ∏è –í–∞–≥–æ–Ω 12121212 —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
    const typeWorks = await prisma.typeWork.findMany();
    const trains = await prisma.train.findMany();
    const carriages = await prisma.carriage.findMany();
    const completedJobs = await prisma.completedJob.findMany();
    const locations = await prisma.currentLocation.findMany();

    console.log('\nüìä –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏:');
    console.log('–¢–∏–ø—ã —Ä–∞–±–æ—Ç:', typeWorks.map(t => t.name));
    console.log('–ü–æ–µ–∑–¥–∞:', trains.map(t => t.number));
    console.log('–í–∞–≥–æ–Ω—ã:', carriages.map(c => `${c.number} (${c.type})`));
    console.log('–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã:', completedJobs.map(j => j.name));
    console.log('–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:', locations.map(l => l.name));

    console.log('\n‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

addTestData();