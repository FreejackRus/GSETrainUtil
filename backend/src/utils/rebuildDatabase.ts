import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcrypt';

const prisma = new PrismaClient();

async function rebuildDatabase() {
  try {
    console.log('üóëÔ∏è –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—É—á–∏—Ç—ã–≤–∞—è –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏)
    await prisma.request.deleteMany({});
    await prisma.equipmentPhoto.deleteMany({});
    await prisma.equipment.deleteMany({});
    await prisma.carriage.deleteMany({});
    await prisma.train.deleteMany({});
    await prisma.typeWork.deleteMany({});
    await prisma.completedJob.deleteMany({});
    await prisma.currentLocation.deleteMany({});
    await prisma.user.deleteMany({});
    await prisma.device.deleteMany({});
    
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞');

    console.log('üë• –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–æ–ª—è–º–∏
    const users = [
      {
        login: 'admin',
        password: await bcrypt.hash('admin', 10),
        role: 'admin',
        name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
      },
      {
        login: 'engineer',
        password: await bcrypt.hash('engineer', 10),
        role: 'engineer',
        name: '–ò–Ω–∂–µ–Ω–µ—Ä –ò–≤–∞–Ω–æ–≤ –ò.–ò.'
      },
      {
        login: 'technician',
        password: await bcrypt.hash('technician', 10),
        role: 'technician',
        name: '–¢–µ—Ö–Ω–∏–∫ –ü–µ—Ç—Ä–æ–≤ –ü.–ü.'
      }
    ];

    const createdUsers = [];
    for (const user of users) {
      const createdUser = await prisma.user.create({ data: user });
      createdUsers.push(createdUser);
    }

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã');

    console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤...');

    // –°–æ–∑–¥–∞–µ–º —Ç–∏–ø—ã —Ä–∞–±–æ—Ç
    const typeWorks = await Promise.all([
      prisma.typeWork.create({ data: { name: '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ WiFi –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è' } }),
      prisma.typeWork.create({ data: { name: '–ó–∞–º–µ–Ω–∞ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è' } }),
      prisma.typeWork.create({ data: { name: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ' } }),
      prisma.typeWork.create({ data: { name: '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è' } }),
      prisma.typeWork.create({ data: { name: '–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è' } })
    ]);

    // –°–æ–∑–¥–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã
    const completedJobs = await Promise.all([
      prisma.completedJob.create({ data: { name: '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ WiFi –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: —Ä–æ—É—Ç–µ—Ä, –∫–æ–º–º—É—Ç–∞—Ç–æ—Ä, —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞' } }),
      prisma.completedJob.create({ data: { name: '–ó–∞–º–µ–Ω–µ–Ω –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω—ã–π –∫–æ–º–º—É—Ç–∞—Ç–æ—Ä –∏ –±–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è' } }),
      prisma.completedJob.create({ data: { name: '–ü—Ä–æ–≤–µ–¥–µ–Ω–æ –¢–û WiFi –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏ –∞–Ω—Ç–µ–Ω–Ω' } }),
      prisma.completedJob.create({ data: { name: '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã –∏ –∫–∞–±–µ–ª–∏' } }),
      prisma.completedJob.create({ data: { name: '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç WiFi –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è' } })
    ]);

    // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—É—â–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
    const currentLocations = await Promise.all([
      prisma.currentLocation.create({ data: { name: '–î–µ–ø–æ –ú–æ—Å–∫–≤–∞-–°–æ—Ä—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è' } }),
      prisma.currentLocation.create({ data: { name: '–î–µ–ø–æ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥-–ì–ª–∞–≤–Ω—ã–π' } }),
      prisma.currentLocation.create({ data: { name: '–î–µ–ø–æ –ö–∞–∑–∞–Ω—å-–ü–∞—Å—Å–∞–∂–∏—Ä—Å–∫–∞—è' } }),
      prisma.currentLocation.create({ data: { name: '–î–µ–ø–æ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥-–°–æ—Ä—Ç–∏—Ä–æ–≤–æ—á–Ω—ã–π' } }),
      prisma.currentLocation.create({ data: { name: '–î–µ–ø–æ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫-–ì–ª–∞–≤–Ω—ã–π' } })
    ]);

    // –°–æ–∑–¥–∞–µ–º –ø–æ–µ–∑–¥–∞
    const trains = await Promise.all([
      prisma.train.create({ data: { number: '7001' } }),
      prisma.train.create({ data: { number: '7002' } }),
      prisma.train.create({ data: { number: '7003' } }),
      prisma.train.create({ data: { number: '7004' } }),
      prisma.train.create({ data: { number: '7005' } })
    ]);

    // –°–æ–∑–¥–∞–µ–º –≤–∞–≥–æ–Ω—ã
    const carriages = await Promise.all([
      prisma.carriage.create({ data: { number: '12', type: '–ü–ª–∞—Ü–∫–∞—Ä—Ç–Ω—ã–π', trainId: trains[0].id } }),
      prisma.carriage.create({ data: { number: '08', type: '–ö—É–ø–µ–π–Ω—ã–π', trainId: trains[1].id } }),
      prisma.carriage.create({ data: { number: '01', type: '–°–í', trainId: trains[2].id } }),
      prisma.carriage.create({ data: { number: '15', type: '–ü–ª–∞—Ü–∫–∞—Ä—Ç–Ω—ã–π', trainId: trains[3].id } }),
      prisma.carriage.create({ data: { number: '03', type: '–ö—É–ø–µ–π–Ω—ã–π', trainId: trains[4].id } })
    ]);

    console.log('‚úÖ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ —Å–æ–∑–¥–∞–Ω—ã');

    console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è...');

    // –°–æ–∑–¥–∞–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
    const equipmentList = await Promise.all([
      prisma.equipment.create({ 
        data: { 
          type: 'WiFi —Ä–æ—É—Ç–µ—Ä', 
          serialNumber: 'WRT-2025-001', 
          macAddress: '00:1A:2B:3C:4D:5E', 
          status: 'active',
          carriageId: carriages[0].id 
        } 
      }),
      prisma.equipment.create({ 
        data: { 
          type: '–°–µ—Ç–µ–≤–æ–π –∫–æ–º–º—É—Ç–∞—Ç–æ—Ä', 
          serialNumber: 'SW-2025-045', 
          macAddress: '00:1A:2B:3C:4D:61', 
          status: 'active',
          carriageId: carriages[1].id 
        } 
      }),
      prisma.equipment.create({ 
        data: { 
          type: '–¢–æ—á–∫–∞ –¥–æ—Å—Ç—É–ø–∞ WiFi', 
          serialNumber: 'AP-2025-078', 
          macAddress: '00:1A:2B:3C:4D:62', 
          status: 'active',
          carriageId: carriages[2].id 
        } 
      }),
      prisma.equipment.create({ 
        data: { 
          type: '–ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä RJ45', 
          serialNumber: 'CON-2025-001', 
          macAddress: null, 
          status: 'active',
          carriageId: carriages[3].id 
        } 
      }),
      prisma.equipment.create({ 
        data: { 
          type: 'WiFi —Ä–æ—É—Ç–µ—Ä', 
          serialNumber: 'WRT-2025-002', 
          macAddress: '00:1A:2B:3C:4D:63', 
          status: 'active',
          carriageId: carriages[4].id 
        } 
      })
    ]);

    console.log('‚úÖ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ');

    console.log('üì∏ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è...');

    // –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    for (const equipment of equipmentList) {
      await prisma.equipmentPhoto.create({
        data: {
          equipmentId: equipment.id,
          photoType: 'equipment',
          photoPath: '/uploads/equipment/router.svg',
          description: '–§–æ—Ç–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è'
        }
      });
    }

    console.log('‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å–æ–∑–¥–∞–Ω—ã');

    console.log('üöÇ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫...');

    // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫–∏
    const requests = [
      {
        applicationNumber: 2025001,
        applicationDate: new Date('2025-01-15'),
        typeWorkId: typeWorks[0].id,
        trainId: trains[0].id,
        carriageId: carriages[0].id,
        equipmentId: equipmentList[0].id,
        completedJobId: completedJobs[0].id,
        currentLocationId: currentLocations[0].id,
        userId: createdUsers[1].id,
        countEquipment: 1
      },
      {
        applicationNumber: 2025002,
        applicationDate: new Date('2025-01-16'),
        typeWorkId: typeWorks[1].id,
        trainId: trains[1].id,
        carriageId: carriages[1].id,
        equipmentId: equipmentList[1].id,
        completedJobId: completedJobs[1].id,
        currentLocationId: currentLocations[1].id,
        userId: createdUsers[2].id,
        countEquipment: 1
      },
      {
        applicationNumber: 2025003,
        applicationDate: new Date('2025-01-17'),
        typeWorkId: typeWorks[2].id,
        trainId: trains[2].id,
        carriageId: carriages[2].id,
        equipmentId: equipmentList[2].id,
        completedJobId: completedJobs[2].id,
        currentLocationId: currentLocations[2].id,
        userId: createdUsers[1].id,
        countEquipment: 1
      },
      {
        applicationNumber: 2025004,
        applicationDate: new Date('2025-01-18'),
        typeWorkId: typeWorks[3].id,
        trainId: trains[3].id,
        carriageId: carriages[3].id,
        equipmentId: equipmentList[3].id,
        completedJobId: completedJobs[3].id,
        currentLocationId: currentLocations[3].id,
        userId: createdUsers[2].id,
        countEquipment: 2
      },
      {
        applicationNumber: 2025005,
        applicationDate: new Date('2025-01-19'),
        typeWorkId: typeWorks[4].id,
        trainId: trains[4].id,
        carriageId: carriages[4].id,
        equipmentId: equipmentList[4].id,
        completedJobId: completedJobs[4].id,
        currentLocationId: currentLocations[4].id,
        userId: createdUsers[1].id,
        countEquipment: 1
      }
    ];

    let createdCount = 0;
    for (const requestData of requests) {
      try {
        await prisma.request.create({ data: requestData });
        createdCount++;
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞ ${requestData.applicationNumber}`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏ ${requestData.applicationNumber}:`, error);
      }
    }

    console.log(`\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞!`);
    console.log(`üìä –°–æ–∑–¥–∞–Ω–æ ${createdCount} –∑–∞—è–≤–æ–∫`);
    console.log(`üë• –°–æ–∑–¥–∞–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    console.log(`üöÇ –°–æ–∑–¥–∞–Ω–æ ${trains.length} –ø–æ–µ–∑–¥–æ–≤`);
    console.log(`üöÉ –°–æ–∑–¥–∞–Ω–æ ${carriages.length} –≤–∞–≥–æ–Ω–æ–≤`);
    console.log(`üîß –°–æ–∑–¥–∞–Ω–æ ${equipmentList.length} –µ–¥–∏–Ω–∏—Ü –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è`);
    console.log(`\nüîê –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:`);
    console.log(`   admin / admin (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)`);
    console.log(`   engineer / engineer (–∏–Ω–∂–µ–Ω–µ—Ä)`);
    console.log(`   technician / technician (—Ç–µ—Ö–Ω–∏–∫)`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

rebuildDatabase();