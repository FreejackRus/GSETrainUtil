// Улучшенная схема базы данных с нормализацией
// Основные принципы:
// 1. Фотографии хранятся в equipment, а не в requests
// 2. Используются связи через ID вместо дублирования данных
// 3. Нормализованная структура для лучшей производительности

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * ==== Enums ====
 */
enum RequestStatus {
  draft
  completed
}

enum UserRole {
  admin
  engineer
}

enum EquipmentPhotoType {
  equipment
  serial
  mac
}

enum CarriagePhotoType {
  carriage
  equipment
}

/**
 * ==== Core ====
 */
model Request {
  id                Int           @id @default(autoincrement())
  status            RequestStatus @default(draft)
  currentLocationId Int?
  performerId       Int?
  userId            Int
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  currentLocation CurrentLocation? @relation(fields: [currentLocationId], references: [id])
  performer       Performer?       @relation(fields: [performerId], references: [id])
  user            User             @relation(fields: [userId], references: [id])

  requestTrains     RequestTrain[]
  requestEquipments RequestEquipment[]

  @@map("requests")
}

model RequestTrain {
  id        Int @id @default(autoincrement())
  requestId Int
  trainId   Int

  request Request @relation(fields: [requestId], references: [id], onDelete: Cascade)
  train   Train   @relation(fields: [trainId], references: [id])

  requestCarriages RequestCarriage[]

  @@unique([requestId, trainId])
  @@map("request_trains")
}

model RequestCarriage {
  id             Int @id @default(autoincrement())
  requestTrainId Int
  carriageId     Int

  requestTrain RequestTrain @relation(fields: [requestTrainId], references: [id], onDelete: Cascade)
  carriage     Carriage     @relation(fields: [carriageId], references: [id])

  requestEquipments RequestEquipment[]
  carriagePhotos    RequestCarriagePhoto[]

  @@unique([requestTrainId, carriageId])
  @@map("request_carriages")
}

model RequestEquipment {
  id                Int @id @default(autoincrement())
  requestId         Int
  requestCarriageId Int
  equipmentId       Int
  typeWorkId        Int

  request         Request         @relation(fields: [requestId], references: [id], onDelete: Cascade)
  requestCarriage RequestCarriage @relation(fields: [requestCarriageId], references: [id])
  equipment       Equipment       @relation(fields: [equipmentId], references: [id])
  typeWork        TypeWork        @relation(fields: [typeWorkId], references: [id])

  photos RequestEquipmentPhoto[]

  // Удобная защита от дублей «в пределах заявки»:
  @@unique([requestId, equipmentId, typeWorkId])
  @@index([requestId])
  @@index([requestCarriageId])
  @@map("request_equipment")
}

/**
 * ==== Photos ====
 */
model RequestEquipmentPhoto {
  id                 Int                @id @default(autoincrement())
  requestEquipmentId Int
  photoType          EquipmentPhotoType
  photoPath          String
  createdAt          DateTime           @default(now())

  requestEquipment RequestEquipment @relation(fields: [requestEquipmentId], references: [id], onDelete: Cascade)

  @@index([requestEquipmentId, photoType])
  @@map("request_equipment_photos")
}

model RequestCarriagePhoto {
  id                Int               @id @default(autoincrement())
  requestCarriageId Int
  photoType         CarriagePhotoType
  photoPath         String
  createdAt         DateTime          @default(now())

  requestCarriage RequestCarriage @relation(fields: [requestCarriageId], references: [id], onDelete: Cascade)

  @@index([requestCarriageId, photoType])
  @@map("request_carriage_photos")
}

/**
 * ==== Domain ====
 */
model Train {
  id     Int    @id @default(autoincrement())
  number String @unique

  requestTrains RequestTrain[]

  @@map("trains")
}

model Carriage {
  id     Int    @id @default(autoincrement())
  number String @unique // если по домену номера не уникальны — убери @unique
  type   String

  requestCarriages RequestCarriage[]
  equipments       Equipment[]

  @@map("carriages")
}

model Equipment {
  id           Int       @id @default(autoincrement())
  name         String
  serialNumber String?   @unique
  macAddress   String?   @unique
  lastService  DateTime?
  carriageId   Int?

  carriage Carriage? @relation(fields: [carriageId], references: [id])

  requestEquipments RequestEquipment[]

  @@map("equipment")
}

model TypeWork {
  id   Int    @id @default(autoincrement())
  name String @unique // "Монтаж", "Демонтаж", ...

  requestEquipments RequestEquipment[]

  @@map("work_types")
}

model Performer {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  requests Request[]

  @@map("performers")
}

model CurrentLocation {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  requests Request[]

  @@map("current_locations")
}

model User {
  id       Int      @id @default(autoincrement())
  login    String   @unique
  password String
  role     UserRole
  name     String

  requests Request[]

  @@map("users")
}
