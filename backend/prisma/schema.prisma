// Улучшенная схема базы данных с нормализацией
// Основные принципы:
// 1. Фотографии хранятся в equipment, а не в requests
// 2. Используются связи через ID вместо дублирования данных
// 3. Нормализованная структура для лучшей производительности

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Основная таблица заявок (упрощенная)
model Request {
  id                Int      @id @default(autoincrement())
  applicationNumber Int      @unique
  applicationDate   DateTime @default(now())
  
  // Связи с нормализованными таблицами
  typeWorkId        Int
  trainId           Int
  carriageId        Int
  equipmentId       Int?     // Опциональное поле, так как оборудование может быть добавлено позже
  completedJobId    Int
  currentLocationId Int
  userId            Int
  
  // Количество оборудования
  countEquipment    Int
  
  // Связи
  typeWork          TypeWork        @relation(fields: [typeWorkId], references: [id])
  train             Train           @relation(fields: [trainId], references: [id])
  carriage          Carriage        @relation(fields: [carriageId], references: [id])
  equipment         Equipment?      @relation(fields: [equipmentId], references: [id])
  completedJob      CompletedJob    @relation(fields: [completedJobId], references: [id])
  currentLocation   CurrentLocation @relation(fields: [currentLocationId], references: [id])
  user              User            @relation(fields: [userId], references: [id])
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("requests")
}

// Таблица поездов
model Train {
  id          Int       @id @default(autoincrement())
  number      String    @unique
  requests    Request[]
  carriages   Carriage[]

  @@map("trains")
}

// Таблица вагонов
model Carriage {
  id          Int         @id @default(autoincrement())
  number      String
  type        String
  trainId     Int
  
  // Связи
  train       Train       @relation(fields: [trainId], references: [id])
  equipment   Equipment[]
  requests    Request[]

  @@unique([number, trainId]) // Уникальность номера вагона в рамках поезда
  @@map("carriages")
}

// Таблица оборудования (с фотографиями)
model Equipment {
  id              Int      @id @default(autoincrement())
  type            String
  serialNumber    String?
  macAddress      String?
  status          String
  lastService     DateTime?
  carriageId      Int
  
  // Фотографии оборудования
  photos          EquipmentPhoto[]
  
  // Связи
  carriage        Carriage @relation(fields: [carriageId], references: [id])
  requests        Request[]

  @@map("equipment")
}

// Таблица фотографий оборудования
model EquipmentPhoto {
  id          Int       @id @default(autoincrement())
  equipmentId Int
  photoType   String    // 'carriage', 'equipment', 'serial', 'mac', 'general', 'final'
  photoPath   String
  description String?
  createdAt   DateTime  @default(now())
  
  // Связи
  equipment   Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)

  @@map("equipment_photos")
}

// Справочные таблицы
model TypeWork {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  requests Request[]

  @@map("type_work")
}

model CompletedJob {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  requests Request[]

  @@map("completed_jobs")
}

model CurrentLocation {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  requests Request[]

  @@map("current_locations")
}

model User {
  id       Int       @id @default(autoincrement())
  login    String    @unique
  password String
  role     String
  name     String
  requests Request[]

  @@map("users")
}

// Устройства (для общей статистики)
model Device {
  id     Int    @id @default(autoincrement())
  status String
  name   String
  count  Int

  @@map("devices")
}