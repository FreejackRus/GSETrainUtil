// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model technicalWorkLog {
  id       Int      @id @default(autoincrement())
  dataWork DateTime

  applicationNumber Int

  connectionTypeWork typeWork
  typeWorkId         Int

  // connectionTrainNumber trainNumber @relation(fields: [trainNumberId], references: [id])
  // trainNumberId         Int

  // connectionTypeCarriage typeCarriage @relation(fields: [typeCarriageId], references: [id])
  // typeCarriageId         Int

  // connectionEquipmentId equipment @relation(fields: [carriageNumberId], references: [id])
  // carriageNumberId      Int

  // connectionEquipment carriageNumber @relation(fields: [equipmentId], references: [id])
  // equipmentId         Int

  // connectionSnEquipment snEquipment @relation(fields: [snEquipmentId], references: [id])
  // snEquipmentId         Int

  // connectionMacAddress macAddress @relation(fields: [macAddressId], references: [id])
  // macAddressId         Int

  // connectionCountEquipment countEquipment @relation(fields: [countEquipmentId], references: [id])
  // countEquipmentId         Int

  // connectionCompletedJob completedJob @relation(fields: [completedJobId], references: [id])
  // completedJobId         Int         

  // connectionCurrentLocation currentLocation @relation(fields: [currentLocationId], references: [id])
  // currentLocationId         Int             
}

model typeWork {
  id                 Int                @id @default(autoincrement())
  typeWork           String           @unique
  // connectionTypeWork technicalWorkLog @relation(fields: [typeWorkId], references: [id])
  typeWorkId Int
}
// @relation(fields: [typeWorkId], references: [id])
// model trainNumber {
//   id                    Int               @id @default(autoincrement())
//   trainNumber           String
//   connectionTrainNumber technicalWorkLog[]
// }

// model typeCarriage {
//   id                     Int               @id @default(autoincrement())
//   connectionTypeCarriage technicalWorkLog[]
//   typeCarriage           String
// }

// model carriageNumber {
//   id                       Int               @id @default(autoincrement())
//   carriageNumber           String
//   connectionCarriageNumber technicalWorkLog[]
// }

// model equipment {
//   id                    Int               @id @default(autoincrement())
//   equipment             String
//   connectionEquipmentId technicalWorkLog[]
// }

// model snEquipment {
//   id                    Int               @id @default(autoincrement())
//   snEquipment           String
//   connectionSnEquipment technicalWorkLog[]
// }

// model macAddress {
//   id                   Int               @id @default(autoincrement())
//   connectionMacAddress technicalWorkLog[]
//   macAddress           String
// }

// model countEquipment {
//   id                       Int               @id @default(autoincrement())
//   count                    Int
//   connectionCountEquipment technicalWorkLog[]
// }

// model completedJob {
//   id                     Int               @id @default(autoincrement())
//   completedJob           String
//   connectionCompletedJob technicalWorkLog[]
// }

// model currentLocation {
//   id                        Int               @id @default(autoincrement())
//   currentLocation           String
//   connectionCurrentLocation technicalWorkLog[]
// }

model User {
  id       Int    @id @default(autoincrement())
  login    String
  password String
  role     String
}
