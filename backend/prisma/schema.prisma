// Улучшенная схема базы данных с нормализацией
// Основные принципы:
// 1. Фотографии хранятся в equipment, а не в requests
// 2. Используются связи через ID вместо дублирования данных
// 3. Нормализованная структура для лучшей производительности

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Основная таблица заявок
model Request {
  id     Int    @id @default(autoincrement())
  status String @default("draft")

  currentLocationId Int?
  completedJobId    Int?
  userId            Int
  photo             String?

  currentLocation CurrentLocation? @relation(fields: [currentLocationId], references: [id])
  completedJob    CompletedJob?    @relation(fields: [completedJobId], references: [id])
  user            User             @relation(fields: [userId], references: [id])

  // Связи к join-таблицам
  requestTrains     RequestTrain[] // Поезда в заявке
  requestCarriages  RequestCarriage[] // Вагоны в заявке + фото номера вагона
  requestEquipments RequestEquipment[] // Оборудование в заявке + тип работ + количество

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("requests")
}

/// Таблица связи заявки с поездами
model RequestTrain {
  id        Int @id @default(autoincrement())
  requestId Int
  trainId   Int

  request Request @relation(fields: [requestId], references: [id], onDelete: Cascade)
  train   Train   @relation(fields: [trainId], references: [id])

  @@unique([requestId, trainId])
  @@map("request_trains")
}

/// Вагоны в заявке + фото номера
model RequestCarriage {
  id            Int     @id @default(autoincrement())
  requestId     Int
  carriageId    Int
  carriagePhoto String? // Фото номера вагона в рамках заявки

  request  Request  @relation(fields: [requestId], references: [id], onDelete: Cascade)
  carriage Carriage @relation(fields: [carriageId], references: [id])

  @@unique([requestId, carriageId])
  @@map("request_carriages")
}

/// Оборудование в заявке + тип работ + количество
model RequestEquipment {
  id          Int @id @default(autoincrement())
  requestId   Int
  equipmentId Int
  typeWorkId  Int // Тип работ для данного оборудования

  request   Request   @relation(fields: [requestId], references: [id], onDelete: Cascade)
  equipment Equipment @relation(fields: [equipmentId], references: [id])
  typeWork  TypeWork  @relation(fields: [typeWorkId], references: [id])

  photos RequestEquipmentPhoto[]

  @@unique([requestId, equipmentId])
  @@map("request_equipment")
}

/// Фото оборудования в заявке
model RequestEquipmentPhoto {
  id                 Int      @id @default(autoincrement())
  requestEquipmentId Int
  photoType          String // 'serial', 'mac', 'equipment', и т.д.
  photoPath          String
  createdAt          DateTime @default(now())

  requestEquipment RequestEquipment @relation(fields: [requestEquipmentId], references: [id], onDelete: Cascade)

  @@unique([requestEquipmentId, photoType])
  @@map("request_equipment_photos")
}

/// Доменные таблицы без фото
model Train {
  id            Int            @id @default(autoincrement())
  number        String         @unique
  carriages     Carriage[]
  requestTrains RequestTrain[]

  @@map("trains")
}

model Carriage {
  id               Int               @id @default(autoincrement())
  number           String
  type             String
  trainId          Int // Привязка к поезду
  train            Train             @relation(fields: [trainId], references: [id])
  requestCarriages RequestCarriage[]
  equipments       Equipment[]

  @@unique([number, trainId])
  @@map("carriages")
}

model Equipment {
  id                Int                @id @default(autoincrement())
  name              String
  serialNumber      String?
  macAddress        String?
  lastService       DateTime?
  carriageId        Int?
  carriage          Carriage?          @relation(fields: [carriageId], references: [id])
  requestEquipments RequestEquipment[]

  @@map("equipment")
}

model TypeWork {
  id                Int                @id @default(autoincrement())
  name              String             @unique
  requestEquipments RequestEquipment[] // Привязка через RequestEquipment

  @@map("type_work")
}

model CompletedJob {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  requests Request[]

  @@map("completed_jobs")
}

model CurrentLocation {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  requests Request[]

  @@map("current_locations")
}

model User {
  id       Int       @id @default(autoincrement())
  login    String    @unique
  password String
  role     String
  name     String
  requests Request[]

  @@map("users")
}
